
services:
  # Perfil de Desenvolvimento
  chat-service:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    image: chat-service:dev
    user: "1001:1001"
    env_file:
      - ../.env
    # NOVO: Variável de ambiente para a aplicação encontrar o Qdrant
    environment:
      - QDRANT_URL=http://qdrant:6333
      - HF_HOME=/home/appuser/.cache/huggingface
    ports:
      - "8000:8000"
    volumes:
      - ../:/app
      - ../services/chat_service/runs:/app/services/chat_service/runs
      - ../services/chat_service/config:/app/services/chat_service/config:ro
      # NOVO: Volume para a pasta de documentos que vamos criar
      - ../documents:/app/documents
    command: >
       sh -c "
        chown -R 1001:1001 /home/appuser/.cache &&
        python -m uvicorn app.api.main:app --host 0.0.0.0 --port 8000 --reload
       "
    healthcheck:
      test: ["CMD-SHELL", "python -c 'import urllib.request; urllib.request.urlopen(\"http://127.0.0.1:8000/healthz\", timeout=3)' "]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    # NOVO: Garante que o Qdrant inicie antes da sua aplicação
    depends_on:
      - qdrant
    # NOVO: Conecta o serviço à rede compartilhada
    networks:
      - chatnet
    profiles: ["dev"]

  # Perfil de Produção
  chat-service-prod:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    image: chat-service:prod
    env_file:
      - ../.env
    # NOVO: Variável de ambiente para a aplicação encontrar o Qdrant
    environment:
      - QDRANT_URL=http://qdrant:6333
    ports:
      - "8000:8000"
    volumes:
      - ../services/chat_service/runs:/app/services/chat_service/runs
      - ../services/chat_service/config:/app/services/chat_service/config:ro
      # NOVO: Volume para a pasta de documentos
      - ../documents:/app/documents
    command: >
      python -m uvicorn services.chat_service.app.api.main:app
      --host 0.0.0.0 --port 8000 --workers 1
    restart: unless-stopped
    # NOVO: Garante que o Qdrant inicie antes da sua aplicação
    depends_on:
      - qdrant
    # NOVO: Conecta o serviço à rede compartilhada
    networks:
      - chatnet
    profiles: ["prod"]

  # NOVO: Serviço do banco de dados vetorial Qdrant
  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage
    # Garante que o Qdrant leia a chave do .env
    env_file:
      - ../.env
    # Instrui o Qdrant a usar a chave para ativar a segurança
    command: ["./entrypoint.sh", "--api-key", "${QDRANT_API_KEY}"]
    networks:
      - chatnet

# NOVO: Bloco para definir volumes e redes
volumes:
  qdrant_data:

networks:
  chatnet: